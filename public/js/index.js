/* Generated by the Nim Compiler v0.17.0 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI83004 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82034 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82031 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI79005 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI79002 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80008 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI77002 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI74005 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI40179 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI74002 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI72003 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3487 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3487.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3487, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
var NNI3450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3450.node = NNI3450;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3448.base = NTI3424;
NTI3450.base = NTI3448;
NTI72003.base = NTI138;
NTI74002.base = NTI138;
NTI40179.base = NTI138;
NTI74005.base = NTI138;
NTI77002.base = NTI138;
NTI80008.base = NTI138;
NTI79002.base = NTI138;
NTI79005.base = NTI138;
NTI82031.base = NTI138;
NTI82034.base = NTI138;
NTI83004.base = NTI138;
function makeNimstrLit(c_14003) {

    var ln = c_14003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function setConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_19217, src_19218, ti_19219) {

var result_19629 = null;
switch (ti_19219.kind) {
case 21: case 22: case 23: case 5: if (!(isFatPointer_19201(ti_19219))) {
result_19629 = src_19218;
}
else {
result_19629 = [src_19218[0], src_19218[1]];}


break;
case 19:       if (dest_19217 === null || dest_19217 === undefined) {
        dest_19217 = {};
      }
      else {
        for (var key in dest_19217) { delete dest_19217[key]; }
      }
      for (var key in src_19218) { dest_19217[key] = src_19218[key]; }
      result_19629 = dest_19217;
    
break;
case 18: case 17: if (!((ti_19219.base == null))) {
result_19629 = nimCopy(dest_19217, src_19218, ti_19219.base);
}
else {
if ((ti_19219.kind == 17)) {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {m_type: ti_19219} : dest_19217;}
else {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {} : dest_19217;}
}
nimCopyAux(result_19629, src_19218, ti_19219.node);

break;
case 24: case 4: case 27: case 16:       if (src_19218 === null) {
        result_19629 = null;
      }
      else {
        if (dest_19217 === null || dest_19217 === undefined) {
          dest_19217 = new Array(src_19218.length);
        }
        else {
          dest_19217.length = src_19218.length;
        }
        result_19629 = dest_19217;
        for (var i = 0; i < src_19218.length; ++i) {
          result_19629[i] = nimCopy(result_19629[i], src_19218[i], ti_19219.base);
        }
      }
    
break;
case 28:       if (src_19218 !== null) {
        result_19629 = src_19218.slice(0);
      }
    
break;
default: 
result_19629 = src_19218;
break;
}
return result_19629;
}
function eqStrings(a_16603, b_16604) {

    if (a_16603 == b_16604) return true;
    if ((!a_16603) || (!b_16604)) return false;
    var alen = a_16603.length;
    if (alen != b_16604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16603[i] != b_16604[i]) return false;
    return true;
  }
function toJSStr(s_14403) {

    var len = s_14403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14403[i] < 128)
        asciiPart[i] = fcc(s_14403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_13406, ename_13407) {

e_13406.name = ename_13407;
if ((excHandler == 0)) {
unhandledException(e_13406);
}

throw e_13406;}
var fields_72002 = nimCopy(null, [makeNimstrLit("char-name"), makeNimstrLit("portrait"), makeNimstrLit("level"), makeNimstrLit("deity"), makeNimstrLit("homeland"), makeNimstrLit("race"), makeNimstrLit("alignment"), makeNimstrLit("gender"), makeNimstrLit("age"), makeNimstrLit("height"), makeNimstrLit("weight"), makeNimstrLit("hair"), makeNimstrLit("eyes"), makeNimstrLit("xp"), makeNimstrLit("size")], NTI72003);
function cstrToNimstr(c_14203) {

  var ln = c_14203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
var scores_74001 = nimCopy(null, [makeNimstrLit("str-score"), makeNimstrLit("str-adj"), makeNimstrLit("dex-score"), makeNimstrLit("dex-adj"), makeNimstrLit("con-score"), makeNimstrLit("con-adj"), makeNimstrLit("int-score"), makeNimstrLit("int-adj"), makeNimstrLit("wis-score"), makeNimstrLit("wis-adj"), makeNimstrLit("cha-score"), makeNimstrLit("cha-adj")], NTI74002);
function addInt(a_16803, b_16804) {

      var result = a_16803 + b_16804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr([48, 57]);
function subInt(a_17003, b_17004) {

      var result = a_17003 - b_17004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_17203, b_17204) {

      var result = a_17203 * b_17204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
var modifiers_74004 = nimCopy(null, [makeNimstrLit("str-mod"), makeNimstrLit("str-adj-mod"), makeNimstrLit("dex-mod"), makeNimstrLit("dex-adj-mod"), makeNimstrLit("con-mod"), makeNimstrLit("con-adj-mod"), makeNimstrLit("int-mod"), makeNimstrLit("int-adj-mod"), makeNimstrLit("wis-mod"), makeNimstrLit("wis-adj-mod"), makeNimstrLit("cha-mod"), makeNimstrLit("cha-adj-mod")], NTI74005);
var adjust_77001 = nimCopy(null, [makeNimstrLit("hp-adjust-1"), makeNimstrLit("hp-adjust-2"), makeNimstrLit("hp-adjust-3")], NTI77002);
var fields_80007 = nimCopy(null, [makeNimstrLit("class-name"), makeNimstrLit("class-levels"), makeNimstrLit("hit-die"), makeNimstrLit("bab"), makeNimstrLit("base-skills"), makeNimstrLit("base-fort"), makeNimstrLit("base-ref"), makeNimstrLit("base-will")], NTI80008);
var bonuses_79001 = nimCopy(null, [makeNimstrLit("armor-bns"), makeNimstrLit("shield-bns"), makeNimstrLit("nat-bns"), makeNimstrLit("defl-bns"), makeNimstrLit("dodge-bns"), makeNimstrLit("misc-bns")], NTI79002);
var saves_79004 = nimCopy(null, [makeNimstrLit("fort-mag"), makeNimstrLit("fort-misc"), makeNimstrLit("fort-temp"), makeNimstrLit("ref-mag"), makeNimstrLit("ref-misc"), makeNimstrLit("ref-temp"), makeNimstrLit("will-mag"), makeNimstrLit("will-misc"), makeNimstrLit("will-temp")], NTI79005);
var columns_82030 = nimCopy(null, [makeNimstrLit("<input type=\"text\" class=\"form-control width-150\">"), makeNimstrLit("<input type=\"number\" class=\"form-control width-60\" value = \"0\">"), makeNimstrLit("<input type=\"text\" class=\"form-control width-75\">"), makeNimstrLit("<input type=\"text\" class=\"form-control width-50\">"), makeNimstrLit("<input type=\"number\" class=\"form-control width-60\" value = \"0\" min=\"0\">"), makeNimstrLit("<input type=\"number\" class=\"form-control width-60\" value = \"0\" min=\"0\">"), makeNimstrLit("<input type=\"text\" class=\"form-control width-75\">"), makeNimstrLit("<input type=\"text\" class=\"form-control width-150\">")], NTI82031);
var colIds_82033 = nimCopy(null, [makeNimstrLit("attack-name"), makeNimstrLit("attack-bns"), makeNimstrLit("crit-rng"), makeNimstrLit("attack-type"), makeNimstrLit("attack-range"), makeNimstrLit("ammo"), makeNimstrLit("attack-damage"), makeNimstrLit("attack-notes")], NTI82034);
var skills_83003 = nimCopy(null, [makeNimstrLit("acrobatics"), makeNimstrLit("appraise"), makeNimstrLit("bluff"), makeNimstrLit("climb"), makeNimstrLit("craft"), makeNimstrLit("diplomacy"), makeNimstrLit("disable-device"), makeNimstrLit("disguise"), makeNimstrLit("escape-artist"), makeNimstrLit("fly"), makeNimstrLit("handle-animal"), makeNimstrLit("heal"), makeNimstrLit("intimidate"), makeNimstrLit("knowledge1"), makeNimstrLit("knowledge2"), makeNimstrLit("knowledge3"), makeNimstrLit("linguistics"), makeNimstrLit("perception"), makeNimstrLit("perform"), makeNimstrLit("profession"), makeNimstrLit("ride"), makeNimstrLit("sense-motive"), makeNimstrLit("sleight-of-hand"), makeNimstrLit("spellcraft"), makeNimstrLit("stealth"), makeNimstrLit("survival"), makeNimstrLit("swim"), makeNimstrLit("use-magic")], NTI83004);
var nimvm_5887 = false;
var nim_program_result = 0;
var globalRaiseHook_11005 = [null];
var localRaiseHook_11010 = [null];
var outOfMemHook_11013 = [null];
function isFatPointer_19201(ti_19203) {

var result_19204 = false;
BeforeRet: do {
result_19204 = !((ConstSet1[ti_19203.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_19204;
}
function nimCopyAux(dest_19222, src_19223, n_19225) {

switch (n_19225.kind) {
case 0: 
break;
case 1:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
    
break;
case 2: L1: do {
var i_19615 = 0;
var colontmp__19617 = 0;
colontmp__19617 = (n_19225.len - 1);
var res_19620 = 0;
L2: do {
L3: while (true) {
if (!(res_19620 <= colontmp__19617)) break L3;
i_19615 = res_19620;
nimCopyAux(dest_19222, src_19223, n_19225.sons[i_19615]);
res_19620 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
      for (var i = 0; i < n_19225.sons.length; ++i) {
        nimCopyAux(dest_19222, src_19223, n_19225.sons[i][1]);
      }
    
break;
}
}
function add_11029(x_11032, x_11032_Idx, y_11033) {

        var len = x_11032[0].length-1;
        for (var i = 0; i < y_11033.length; ++i) {
          x_11032[0][len] = y_11033.charCodeAt(i);
          ++len;
        }
        x_11032[0][len] = 0
      }
function unhandledException(e_13253) {

var Tmp1;
var buf_13254 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_13253.message, null))) Tmp1 = false; else {Tmp1 = !((e_13253.message[0] == 0)); }if (Tmp1) {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(e_13253.message); } else { buf_13254[0] = e_13253.message;};
}
else {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13254[0] = makeNimstrLit(" [");};
add_11029(buf_13254, 0, e_13253.name);
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13254[0] = makeNimstrLit("]\x0A");};
var cbuf_13401 = toJSStr(buf_13254[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_13401);
  }
  else {
    throw cbuf_13401;
  }
  }
function raiseOverflow() {

var e_13840 = null;
e_13840 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_13840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
e_13840.parent = null;
raiseException(e_13840, "OverflowError");
}
function raiseDivByZero() {

var e_13858 = null;
e_13858 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
e_13858.parent = null;
raiseException(e_13858, "DivByZeroError");
}
function eval_27539(js_27541) {

window.eval(js_27541);
}
eval_27539("doNothing = function(something, something2, something3) {}\nexec = function(fname){window[fname]()}\nnatlog = function(element) {console.log(element)}\nadd = function(n1, n2) {return (n1/1 + n2/1)}\nsub = function(n1, n2) {return (n1/1 - n2/1)}\nvalInt = function(element){return element.val()} \n");
var objectID_46232 = /**/[0];
function initTable_53003(initialSize_53008) {

var result_53029 = {data: null, counter: 0};
result_53029.counter = 0;
result_53029.data = new Array(initialSize_53008); for (var i=0;i<initialSize_53008;++i) {result_53029.data[i]={Field0: 0, Field1: null, Field2: null};}return result_53029;
}
function initTable_53213(initialSize_53218) {

var result_53239 = {data: null, counter: 0};
result_53239.counter = 0;
result_53239.data = new Array(initialSize_53218); for (var i=0;i<initialSize_53218;++i) {result_53239.data[i]={Field0: 0, Field1: null, Field2: 0};}return result_53239;
}
function initTable_53413(initialSize_53418) {

var result_53439 = {data: null, counter: 0};
result_53439.counter = 0;
result_53439.data = new Array(initialSize_53418); for (var i=0;i<initialSize_53418;++i) {result_53439.data[i]={Field0: 0, Field1: null, Field2: null};}return result_53439;
}
var data_53211 = /**/[initTable_53003(8)];
var intData_53411 = /**/[initTable_53213(8)];
var bindings_53611 = /**/[initTable_53413(16)];
function emarkamp__46005(h_46007, val_46008) {

var result_46009 = 0;
result_46009 = ((h_46007 + val_46008) >>> 0);
result_46009 = ((result_46009 + (result_46009 << 10)) >>> 0);
result_46009 = (result_46009 ^ ((result_46009 >>> 0) >>> 6));
return result_46009;
}
function emarkdollar__46042(h_46044) {

var result_46045 = 0;
result_46045 = ((h_46044 + (h_46044 << 3)) >>> 0);
result_46045 = (result_46045 ^ ((result_46045 >>> 0) >>> 11));
result_46045 = ((result_46045 + (result_46045 << 15)) >>> 0);
return result_46045;
}
function hash_46836(x_46838) {

var result_46839 = 0;
var h_46840 = 0;
L1: do {
var i_46850 = 0;
var colontmp__46860 = 0;
colontmp__46860 = ((x_46838 != null ? x_46838.length-1 : 0) - 1);
var res_46863 = 0;
L2: do {
L3: while (true) {
if (!(res_46863 <= colontmp__46860)) break L3;
i_46850 = res_46863;
h_46840 = emarkamp__46005(h_46840, x_46838[i_46850]);
res_46863 += 1;
}
} while(false);
} while(false);
result_46839 = emarkdollar__46042(h_46840);
return result_46839;
}
function isFilled_49464(hcode_49466) {

var result_49467 = false;
result_49467 = !((hcode_49466 == 0));
return result_49467;
}
function nextTry_49601(h_49603, maxHash_49604) {

var result_49605 = 0;
result_49605 = ((h_49603 + 1) & maxHash_49604);
return result_49605;
}
function rawGet_53793(t_53798, key_53800, hc_53802, hc_53802_Idx) {

var Tmp3;
var result_53803 = 0;
BeforeRet: do {
hc_53802[hc_53802_Idx] = hash_46836(key_53800);
if ((hc_53802[hc_53802_Idx] == 0)) {
hc_53802[hc_53802_Idx] = 314159265;
}

var h_53807 = (hc_53802[hc_53802_Idx] & (t_53798.data != null ? (t_53798.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_53798.data[h_53807].Field0)) break L2;
if (!(t_53798.data[h_53807].Field0 == hc_53802[hc_53802_Idx])) Tmp3 = false; else {Tmp3 = eqStrings(t_53798.data[h_53807].Field1, key_53800); }if (Tmp3) {
result_53803 = h_53807;
break BeforeRet;
}

h_53807 = nextTry_49601(h_53807, (t_53798.data != null ? (t_53798.data.length-1) : -1));
}
} while(false);
result_53803 = (-1 - h_53807);
} while (false); 
return result_53803;
}
function hasKey_53781(t_53787, key_53789) {

var result_53790 = false;
var hc_53791 = [0];
result_53790 = (0 <= rawGet_53793(t_53787, key_53789, hc_53791, 0));
return result_53790;
}
function contains_53770(t_53776, key_53778) {

var result_53779 = false;
BeforeRet: do {
result_53779 = hasKey_53781(t_53776, key_53778);
break BeforeRet;
} while (false); 
return result_53779;
}
function propExists_53612(propName_53614) {

var result_53615 = false;
result_53615 = contains_53770(data_53211[0], propName_53614);
return result_53615;
}
function rawGet_55395(t_55400, key_55402, hc_55404, hc_55404_Idx) {

var Tmp3;
var result_55405 = 0;
BeforeRet: do {
hc_55404[hc_55404_Idx] = hash_46836(key_55402);
if ((hc_55404[hc_55404_Idx] == 0)) {
hc_55404[hc_55404_Idx] = 314159265;
}

var h_55409 = (hc_55404[hc_55404_Idx] & (t_55400.data != null ? (t_55400.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_55400.data[h_55409].Field0)) break L2;
if (!(t_55400.data[h_55409].Field0 == hc_55404[hc_55404_Idx])) Tmp3 = false; else {Tmp3 = eqStrings(t_55400.data[h_55409].Field1, key_55402); }if (Tmp3) {
result_55405 = h_55409;
break BeforeRet;
}

h_55409 = nextTry_49601(h_55409, (t_55400.data != null ? (t_55400.data.length-1) : -1));
}
} while(false);
result_55405 = (-1 - h_55409);
} while (false); 
return result_55405;
}
function mustRehash_49469(length_49471, counter_49472) {

var result_49473 = false;
result_49473 = (((length_49471 * 2) < (counter_49472 * 3)) || ((length_49471 - counter_49472) < 4));
return result_49473;
}
function rawInsert_61726(t_61733, data_61737, data_61737_Idx, key_61739, val_61741, hc_61743, h_61745) {

data_61737[data_61737_Idx][h_61745].Field1 = nimCopy(null, key_61739, NTI138);
data_61737[data_61737_Idx][h_61745].Field2 = val_61741;
data_61737[data_61737_Idx][h_61745].Field0 = hc_61743;
}
function enlarge_60661(t_60668) {

var n_60672 = null;
n_60672 = new Array(((t_60668.data != null ? t_60668.data.length : 0) * 2)); for (var i=0;i<((t_60668.data != null ? t_60668.data.length : 0) * 2);++i) {n_60672[i]={Field0: 0, Field1: null, Field2: 0};}var Tmp1 = t_60668.data; t_60668.data = n_60672; n_60672 = Tmp1;L2: do {
var i_60856 = 0;
var colontmp__62390 = 0;
colontmp__62390 = (n_60672 != null ? (n_60672.length-1) : -1);
var res_62393 = 0;
L3: do {
L4: while (true) {
if (!(res_62393 <= colontmp__62390)) break L4;
i_60856 = res_62393;
var eh_61070 = n_60672[i_60856].Field0;
if (isFilled_49464(eh_61070)) {
var j_61071 = (eh_61070 & (t_60668.data != null ? (t_60668.data.length-1) : -1));
L5: do {
L6: while (true) {
if (!isFilled_49464(t_60668.data[j_61071].Field0)) break L6;
j_61071 = nextTry_49601(j_61071, (t_60668.data != null ? (t_60668.data.length-1) : -1));
}
} while(false);
rawInsert_61726(t_60668, t_60668, "data", n_60672[i_60856].Field1, n_60672[i_60856].Field2, eh_61070, j_61071);
}

res_62393 += 1;
}
} while(false);
} while(false);
}
function rawGetKnownHC_62398(t_62403, key_62405, hc_62407) {

var result_62408 = 0;
BeforeRet: do {
var h_62409 = (hc_62407 & (t_62403.data != null ? (t_62403.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_62403.data[h_62409].Field0)) break L2;
if (((t_62403.data[h_62409].Field0 == hc_62407) && eqStrings(t_62403.data[h_62409].Field1, key_62405))) {
result_62408 = h_62409;
break BeforeRet;
}

h_62409 = nextTry_49601(h_62409, (t_62403.data != null ? (t_62403.data.length-1) : -1));
}
} while(false);
result_62408 = (-1 - h_62409);
} while (false); 
return result_62408;
}
function X5BX5Deq__60248(t_60255, key_60257, val_60259) {

var hc_60260 = [0];
var index_60273 = rawGet_55395(t_60255, key_60257, hc_60260, 0);
if ((0 <= index_60273)) {
t_60255.data[index_60273].Field2 = val_60259;
}
else {
if (mustRehash_49469((t_60255.data != null ? t_60255.data.length : 0), t_60255.counter)) {
enlarge_60661(t_60255);
index_60273 = rawGetKnownHC_62398(t_60255, key_60257, hc_60260[0]);
}

index_60273 = (-1 - index_60273);
rawInsert_61726(t_60255, t_60255, "data", key_60257, val_60259, hc_60260[0], index_60273);
t_60255.counter += 1;
}

}
function rawGet_63258(t_63263, key_63265, hc_63267, hc_63267_Idx) {

var Tmp3;
var result_63268 = 0;
BeforeRet: do {
hc_63267[hc_63267_Idx] = hash_46836(key_63265);
if ((hc_63267[hc_63267_Idx] == 0)) {
hc_63267[hc_63267_Idx] = 314159265;
}

var h_63272 = (hc_63267[hc_63267_Idx] & (t_63263.data != null ? (t_63263.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_63263.data[h_63272].Field0)) break L2;
if (!(t_63263.data[h_63272].Field0 == hc_63267[hc_63267_Idx])) Tmp3 = false; else {Tmp3 = eqStrings(t_63263.data[h_63272].Field1, key_63265); }if (Tmp3) {
result_63268 = h_63272;
break BeforeRet;
}

h_63272 = nextTry_49601(h_63272, (t_63263.data != null ? (t_63263.data.length-1) : -1));
}
} while(false);
result_63268 = (-1 - h_63272);
} while (false); 
return result_63268;
}
function hasKey_67080(t_67086, key_67088) {

var result_67089 = false;
var hc_67090 = [0];
result_67089 = (0 <= rawGet_63258(t_67086, key_67088, hc_67090, 0));
return result_67089;
}
function contains_67069(t_67075, key_67077) {

var result_67078 = false;
BeforeRet: do {
result_67078 = hasKey_67080(t_67075, key_67077);
break BeforeRet;
} while (false); 
return result_67078;
}
function X5BX5D__67318(t_67325, key_67327) {

var result_67329 = [null, 0];
var result_67329_Idx = 0;
var hc_67331 = [0];
var index_67345 = rawGet_63258(t_67325, key_67327, hc_67331, 0);
if ((0 <= index_67345)) {
result_67329 = t_67325.data[index_67345]; result_67329_Idx = "Field2";
}
else {
var e_67606 = null;
e_67606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null};
e_67606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_67327), NTI138);
e_67606.parent = null;
raiseException(e_67606, "KeyError");
}

return [result_67329, result_67329_Idx];
}
function set_67618(propName_67620, value_67621) {

var Tmp1;
X5BX5Deq__60248(intData_53411[0], propName_67620, value_67621);
if (contains_67069(bindings_53611[0], propName_67620)) {
(Tmp1 = X5BX5D__67318(bindings_53611[0], propName_67620), Tmp1[0])[Tmp1[1]].val(value_67621);
}

}
function setIfNo_68175(propName_68177, value_68178) {

if (!(propExists_53612(propName_68177))) {
set_67618(propName_68177, value_68178);
}

}
setIfNo_68175(makeNimstrLit("str-score"), 8);
setIfNo_68175(makeNimstrLit("dex-score"), 8);
setIfNo_68175(makeNimstrLit("con-score"), 8);
setIfNo_68175(makeNimstrLit("int-score"), 8);
setIfNo_68175(makeNimstrLit("wis-score"), 8);
setIfNo_68175(makeNimstrLit("cha-score"), 8);
setIfNo_68175(makeNimstrLit("classCounter"), 1);
setIfNo_68175(makeNimstrLit("attack-counter"), 0);
function jQuery_27514(d_27516) {

var result_27517 = null;
result_27517 = window.jQuery(d_27516);
return result_27517;
}
function q_28010(d_28012) {

var result_28013 = null;
result_28013 = jQuery_27514(d_28012);
return result_28013;
}
function jQuery_27506(s_27508) {

var result_27509 = null;
result_27509 = window.jQuery(s_27508);
return result_27509;
}
function click_28218(sel_28220, handler_28224) {

jQuery_27506(sel_28220).click(handler_28224);
}
function load_28207(sel_28209, url_28210, data_28211, complete_28217) {

jQuery_27506(sel_28209).load(url_28210, data_28211, complete_28217);
}
function X5BX5D__54832(t_54839, key_54841) {

var result_54843 = [null, 0];
var result_54843_Idx = 0;
var hc_54845 = [0];
var index_54859 = rawGet_53793(t_54839, key_54841, hc_54845, 0);
if ((0 <= index_54859)) {
result_54843 = t_54839.data[index_54859]; result_54843_Idx = "Field2";
}
else {
var e_55206 = null;
e_55206 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null};
e_55206.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_54841), NTI138);
e_55206.parent = null;
raiseException(e_55206, "KeyError");
}

return [result_54843, result_54843_Idx];
}
function hasKey_55383(t_55389, key_55391) {

var result_55392 = false;
var hc_55393 = [0];
result_55392 = (0 <= rawGet_55395(t_55389, key_55391, hc_55393, 0));
return result_55392;
}
function contains_55372(t_55378, key_55380) {

var result_55381 = false;
BeforeRet: do {
result_55381 = hasKey_55383(t_55378, key_55380);
break BeforeRet;
} while (false); 
return result_55381;
}
function X5BX5D__56267(t_56274, key_56276) {

var result_56278 = [null, 0];
var result_56278_Idx = 0;
var hc_56280 = [0];
var index_56294 = rawGet_55395(t_56274, key_56276, hc_56280, 0);
if ((0 <= index_56294)) {
result_56278 = t_56274.data[index_56294]; result_56278_Idx = "Field2";
}
else {
var e_56606 = null;
e_56606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null};
e_56606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_56276), NTI138);
e_56606.parent = null;
raiseException(e_56606, "KeyError");
}

return [result_56278, result_56278_Idx];
}
function rawInsert_58242(t_58249, data_58253, data_58253_Idx, key_58255, val_58257, hc_58259, h_58261) {

data_58253[data_58253_Idx][h_58261].Field1 = nimCopy(null, key_58255, NTI138);
data_58253[data_58253_Idx][h_58261].Field2 = nimCopy(null, val_58257, NTI138);
data_58253[data_58253_Idx][h_58261].Field0 = hc_58259;
}
function enlarge_57177(t_57184) {

var n_57188 = null;
n_57188 = new Array(((t_57184.data != null ? t_57184.data.length : 0) * 2)); for (var i=0;i<((t_57184.data != null ? t_57184.data.length : 0) * 2);++i) {n_57188[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_57184.data; t_57184.data = n_57188; n_57188 = Tmp1;L2: do {
var i_57372 = 0;
var colontmp__58906 = 0;
colontmp__58906 = (n_57188 != null ? (n_57188.length-1) : -1);
var res_58909 = 0;
L3: do {
L4: while (true) {
if (!(res_58909 <= colontmp__58906)) break L4;
i_57372 = res_58909;
var eh_57586 = n_57188[i_57372].Field0;
if (isFilled_49464(eh_57586)) {
var j_57587 = (eh_57586 & (t_57184.data != null ? (t_57184.data.length-1) : -1));
L5: do {
L6: while (true) {
if (!isFilled_49464(t_57184.data[j_57587].Field0)) break L6;
j_57587 = nextTry_49601(j_57587, (t_57184.data != null ? (t_57184.data.length-1) : -1));
}
} while(false);
rawInsert_58242(t_57184, t_57184, "data", n_57188[i_57372].Field1, n_57188[i_57372].Field2, eh_57586, j_57587);
}

res_58909 += 1;
}
} while(false);
} while(false);
}
function rawGetKnownHC_58914(t_58919, key_58921, hc_58923) {

var result_58924 = 0;
BeforeRet: do {
var h_58925 = (hc_58923 & (t_58919.data != null ? (t_58919.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_58919.data[h_58925].Field0)) break L2;
if (((t_58919.data[h_58925].Field0 == hc_58923) && eqStrings(t_58919.data[h_58925].Field1, key_58921))) {
result_58924 = h_58925;
break BeforeRet;
}

h_58925 = nextTry_49601(h_58925, (t_58919.data != null ? (t_58919.data.length-1) : -1));
}
} while(false);
result_58924 = (-1 - h_58925);
} while (false); 
return result_58924;
}
function X5BX5Deq__56764(t_56771, key_56773, val_56775) {

var hc_56776 = [0];
var index_56789 = rawGet_53793(t_56771, key_56773, hc_56776, 0);
if ((0 <= index_56789)) {
t_56771.data[index_56789].Field2 = nimCopy(null, val_56775, NTI138);
}
else {
if (mustRehash_49469((t_56771.data != null ? t_56771.data.length : 0), t_56771.counter)) {
enlarge_57177(t_56771);
index_56789 = rawGetKnownHC_58914(t_56771, key_56773, hc_56776[0]);
}

index_56789 = (-1 - index_56789);
rawInsert_58242(t_56771, t_56771, "data", key_56773, val_56775, hc_56776[0], index_56789);
t_56771.counter += 1;
}

}
function valInt_27528(element_27530) {

var result_27531 = 0;
result_27531 = window.valInt(element_27530);
return result_27531;
}
function rawInsert_65368(t_65375, data_65379, data_65379_Idx, key_65381, val_65383, hc_65385, h_65387) {

data_65379[data_65379_Idx][h_65387].Field1 = nimCopy(null, key_65381, NTI138);
data_65379[data_65379_Idx][h_65387].Field2 = val_65383;
data_65379[data_65379_Idx][h_65387].Field0 = hc_65385;
}
function enlarge_64303(t_64310) {

var n_64314 = null;
n_64314 = new Array(((t_64310.data != null ? t_64310.data.length : 0) * 2)); for (var i=0;i<((t_64310.data != null ? t_64310.data.length : 0) * 2);++i) {n_64314[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_64310.data; t_64310.data = n_64314; n_64314 = Tmp1;L2: do {
var i_64498 = 0;
var colontmp__66032 = 0;
colontmp__66032 = (n_64314 != null ? (n_64314.length-1) : -1);
var res_66035 = 0;
L3: do {
L4: while (true) {
if (!(res_66035 <= colontmp__66032)) break L4;
i_64498 = res_66035;
var eh_64712 = n_64314[i_64498].Field0;
if (isFilled_49464(eh_64712)) {
var j_64713 = (eh_64712 & (t_64310.data != null ? (t_64310.data.length-1) : -1));
L5: do {
L6: while (true) {
if (!isFilled_49464(t_64310.data[j_64713].Field0)) break L6;
j_64713 = nextTry_49601(j_64713, (t_64310.data != null ? (t_64310.data.length-1) : -1));
}
} while(false);
rawInsert_65368(t_64310, t_64310, "data", n_64314[i_64498].Field1, n_64314[i_64498].Field2, eh_64712, j_64713);
}

res_66035 += 1;
}
} while(false);
} while(false);
}
function rawGetKnownHC_66040(t_66045, key_66047, hc_66049) {

var result_66050 = 0;
BeforeRet: do {
var h_66051 = (hc_66049 & (t_66045.data != null ? (t_66045.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isFilled_49464(t_66045.data[h_66051].Field0)) break L2;
if (((t_66045.data[h_66051].Field0 == hc_66049) && eqStrings(t_66045.data[h_66051].Field1, key_66047))) {
result_66050 = h_66051;
break BeforeRet;
}

h_66051 = nextTry_49601(h_66051, (t_66045.data != null ? (t_66045.data.length-1) : -1));
}
} while(false);
result_66050 = (-1 - h_66051);
} while (false); 
return result_66050;
}
function X5BX5Deq__63244(t_63251, key_63253, val_63255) {

var hc_63256 = [0];
var index_63915 = rawGet_63258(t_63251, key_63253, hc_63256, 0);
if ((0 <= index_63915)) {
t_63251.data[index_63915].Field2 = val_63255;
}
else {
if (mustRehash_49469((t_63251.data != null ? t_63251.data.length : 0), t_63251.counter)) {
enlarge_64303(t_63251);
index_63915 = rawGetKnownHC_66040(t_63251, key_63253, hc_63256[0]);
}

index_63915 = (-1 - index_63915);
rawInsert_65368(t_63251, t_63251, "data", key_63253, val_63255, hc_63256[0], index_63915);
t_63251.counter += 1;
}

}
function bindp_54451(el_54453, prop_54454) {

var Tmp1;
var Tmp2;
function colonanonymous__59614(e_59616) {

if (contains_53770(data_53211[0], prop_54454)) {
X5BX5Deq__56764(data_53211[0], prop_54454, cstrToNimstr(el_54453.val()));
}
else {
if (contains_55372(intData_53411[0], prop_54454)) {
X5BX5Deq__60248(intData_53411[0], prop_54454, (valInt_27528(el_54453)|0));
}
else {
console.log(toJSStr((makeNimstrLit("element ").slice(0,-1)).concat(cstrToNimstr(el_54453.attr("id")).slice(0,-1),makeNimstrLit(" is unbound"))));
}
}
}
if (contains_53770(data_53211[0], prop_54454)) {
el_54453.val(toJSStr((Tmp1 = X5BX5D__54832(data_53211[0], prop_54454), Tmp1[0])[Tmp1[1]]));
}
else {
if (contains_55372(intData_53411[0], prop_54454)) {
el_54453.val((Tmp2 = X5BX5D__56267(intData_53411[0], prop_54454), Tmp2[0])[Tmp2[1]]);
}
else {
X5BX5Deq__56764(data_53211[0], prop_54454, cstrToNimstr(el_54453.val()));
}
}
el_54453.change(colonanonymous__59614);
X5BX5Deq__63244(bindings_53611[0], prop_54454, el_54453);
}
function bindid_66745(prop_66747) {

bindp_54451(jQuery_27506(toJSStr([35].concat(prop_66747))), prop_66747);
}
function updateDetails_72005(response_72007, status_72008, xhr_72009) {

L1: do {
var field_72045 = null;
var i_72049 = 0;
if ((i_72049 <= 14)) {
L2: do {
L3: while (true) {
if (!true) break L3;
field_72045 = fields_72002[i_72049];
bindid_66745(field_72045);
if ((14 <= i_72049)) {
break L2;
}

i_72049 += 1;
}
} while(false);
}

} while(false);
}
function loadDetails_72010(e_72012) {

load_28207("#page-content-wrapper", "/public/details.html", "", updateDetails_72005);
}
function change_28232(sel_28234, handler_28238) {

jQuery_27506(sel_28234).change(handler_28238);
}
function set_66752(propName_66754, value_66755) {

var Tmp1;
X5BX5Deq__56764(data_53211[0], propName_66754, value_66755);
if (contains_67069(bindings_53611[0], propName_66754)) {
(Tmp1 = X5BX5D__67318(bindings_53611[0], propName_66754), Tmp1[0])[Tmp1[1]].val(toJSStr(value_66755));
}

}
function slash__21007(x_21009, y_21010) {

var result_21011 = 0.0;
result_21011 = (x_21009 / y_21010);
return result_21011;
}
function mdf_73003(val_73005) {

var result_73006 = 0;
result_73006 = (Math.floor((slash__21007(val_73005, 2) - 5.0000000000000000e+00))|0);
return result_73006;
}
function rawParseInt_30966(s_30968, b_30970, b_30970_Idx, start_30971) {

var result_30972 = 0;
var sign_30973 = -1;
var i_30974 = start_30971;
if ((s_30968[i_30974] == 43)) {
i_30974 = addInt(i_30974, 1);
}
else {
if ((s_30968[i_30974] == 45)) {
i_30974 = addInt(i_30974, 1);
sign_30973 = 1;
}
}
if ((ConstSet2[s_30968[i_30974]] != undefined)) {
b_30970[b_30970_Idx] = 0;
L1: do {
L2: while (true) {
if (!(ConstSet3[s_30968[i_30974]] != undefined)) break L2;
b_30970[b_30970_Idx] = subInt(mulInt(b_30970[b_30970_Idx], 10), subInt(s_30968[i_30974], 48));
i_30974 = addInt(i_30974, 1);
L3: do {
L4: while (true) {
if (!(s_30968[i_30974] == 95)) break L4;
i_30974 = addInt(i_30974, 1);
}
} while(false);
}
} while(false);
b_30970[b_30970_Idx] = mulInt(b_30970[b_30970_Idx], sign_30973);
result_30972 = subInt(i_30974, start_30971);
}

return result_30972;
}
function npuParseBiggestInt(s_31051, number_31053, number_31053_Idx, start_31054) {

var result_31055 = 0;
var res_31056 = [0];
result_31055 = rawParseInt_30966(s_31051, res_31056, 0, start_31054);
number_31053[number_31053_Idx] = res_31056[0];
return result_31055;
}
function npuParseInt(s_31061, number_31063, number_31063_Idx, start_31064) {

var Tmp1;
var Tmp2;
var result_31065 = 0;
var res_31066 = [0];
result_31065 = npuParseBiggestInt(s_31061, res_31066, 0, start_31064);
if (!true) Tmp1 = false; else {if ((res_31066[0] < -2147483648)) Tmp2 = true; else {Tmp2 = (2147483647 < res_31066[0]); }Tmp1 = Tmp2; }if (Tmp1) {
var e_31079 = null;
e_31079 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_31079.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
e_31079.parent = null;
raiseException(e_31079, "OverflowError");
}
else {
if (!((result_31065 == 0))) {
number_31063[number_31063_Idx] = res_31066[0];
}
}
return result_31065;
}
function nsuParseInt(s_40667) {

var Tmp1;
var result_40668 = [0];
var L_40670 = npuParseInt(s_40667, result_40668, 0, 0);
if (!((L_40670 == (s_40667 != null ? s_40667.length-1 : 0)))) Tmp1 = true; else {Tmp1 = (L_40670 == 0); }if (Tmp1) {
var e_40677 = null;
e_40677 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null};
e_40677.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_40667), NTI138);
e_40677.parent = null;
raiseException(e_40677, "ValueError");
}

return result_40668[0];
}
function prop_68179(propName_68181) {

var Tmp1;
var Tmp2;
var Tmp3;
var result_68182 = null;
if (contains_53770(data_53211[0], propName_68181)) {
Tmp1 = (Tmp2 = X5BX5D__54832(data_53211[0], propName_68181), Tmp2[0])[Tmp2[1]];
}
else {
if (contains_55372(intData_53411[0], propName_68181)) {
Tmp1 = cstrToNimstr(((Tmp3 = X5BX5D__56267(intData_53411[0], propName_68181), Tmp3[0])[Tmp3[1]])+"");
}
else {
Tmp1 = makeNimstrLit("undefined");
}
}
result_68182 = nimCopy(null, Tmp1, NTI138);
return result_68182;
}
function updateScore_73019(score_73021) {

set_66752((score_73021.slice(0,-1)).concat(makeNimstrLit("-mod")), cstrToNimstr((mdf_73003(nsuParseInt(prop_68179((score_73021.slice(0,-1)).concat(makeNimstrLit("-score"))))))+""));
set_66752((score_73021.slice(0,-1)).concat(makeNimstrLit("-adj-mod")), cstrToNimstr((mdf_73003((nsuParseInt(prop_68179((score_73021.slice(0,-1)).concat(makeNimstrLit("-score")))) + nsuParseInt(prop_68179((score_73021.slice(0,-1)).concat(makeNimstrLit("-adj")))))))+""));
}
function nsuSplitChar(s_40158, sep_40159, maxsplit_40160) {

var result_40162 = null;
result_40162 = nimCopy(null, [], NTI40179);
L1: do {
var x_40181 = null;
var last_40196 = 0;
var splits_40198 = maxsplit_40160;
if ((0 < (s_40158 != null ? s_40158.length-1 : 0))) {
L2: do {
L3: while (true) {
if (!(last_40196 <= (s_40158 != null ? s_40158.length-1 : 0))) break L3;
var first_40200 = last_40196;
L4: do {
L5: while (true) {
if (!((last_40196 < (s_40158 != null ? s_40158.length-1 : 0)) && !((s_40158[last_40196] == sep_40159)))) break L5;
last_40196 += 1;
}
} while(false);
if ((splits_40198 == 0)) {
last_40196 = (s_40158 != null ? s_40158.length-1 : 0);
}

x_40181 = (s_40158.slice(first_40200, ((last_40196 - 1))+1).concat(0));
if (result_40162 != null) { result_40162.push(x_40181); } else { result_40162 = [x_40181]; };
if ((splits_40198 == 0)) {
break L2;
}

splits_40198 -= 1;
last_40196 += 1;
}
} while(false);
}

} while(false);
return result_40162;
}
function sec_70074(propName_70076, section_70077) {

var result_70078 = null;
result_70078 = nimCopy(null, nsuSplitChar(propName_70076, 45, -1)[0], NTI138);
return result_70078;
}
function bindscores_74012() {

function colonanonymous__74055() {

function colonanonymous__74058(e_74060) {

updateScore_73019(sec_70074(s_74057, 0));
}
var s_74057 = nimCopy(null, score_74054, NTI138);
change_28232(toJSStr([35].concat(score_74054)), colonanonymous__74058);
}
L1: do {
var score_74054 = null;
var i_74064 = 0;
if ((i_74064 <= 11)) {
L2: do {
L3: while (true) {
if (!true) break L3;
score_74054 = scores_74001[i_74064];
bindid_66745(score_74054);
colonanonymous__74055();
if ((11 <= i_74064)) {
break L2;
}

i_74064 += 1;
}
} while(false);
}

} while(false);
}
function bindmods_74014() {

L1: do {
var modifier_74076 = null;
var i_74080 = 0;
if ((i_74080 <= 11)) {
L2: do {
L3: while (true) {
if (!true) break L3;
modifier_74076 = modifiers_74004[i_74080];
bindid_66745(modifier_74076);
if ((11 <= i_74080)) {
break L2;
}

i_74080 += 1;
}
} while(false);
}

} while(false);
}
function calcmods_74016() {

L1: do {
var score_74111 = null;
var i_74115 = 0;
if ((i_74115 <= 5)) {
L2: do {
L3: while (true) {
if (!true) break L3;
score_74111 = [makeNimstrLit("str"), makeNimstrLit("dex"), makeNimstrLit("con"), makeNimstrLit("int"), makeNimstrLit("wis"), makeNimstrLit("cha")][i_74115];
updateScore_73019(score_74111);
if ((5 <= i_74115)) {
break L2;
}

i_74115 += 1;
}
} while(false);
}

} while(false);
}
function updateStats_74007(response_74009, status_74010, xhr_74011) {

bindscores_74012();
bindmods_74014();
calcmods_74016();
}
function loadStats_74018(e_74020) {

load_28207("#page-content-wrapper", "/public/stats.html", "", updateStats_74007);
}
function defaults_77023() {

setIfNo_68175(makeNimstrLit("dmg-taken"), 0);
setIfNo_68175(makeNimstrLit("base-hp"), 0);
}
function propInt_68961(propName_68963) {

var Tmp1;
var Tmp2;
var Tmp3;
var result_68964 = 0;
if (contains_55372(intData_53411[0], propName_68963)) {
Tmp1 = (Tmp2 = X5BX5D__56267(intData_53411[0], propName_68963), Tmp2[0])[Tmp2[1]];
}
else {
if (contains_53770(data_53211[0], propName_68963)) {
Tmp1 = nsuParseInt((Tmp3 = X5BX5D__54832(data_53211[0], propName_68963), Tmp3[0])[Tmp3[1]]);
}
else {
Tmp1 = 0;
}
}
result_68964 = Tmp1;
return result_68964;
}
function mdfAdj_73015(score_73017) {

var result_73018 = 0;
result_73018 = mdf_73003((propInt_68961((score_73017.slice(0,-1)).concat(makeNimstrLit("-score"))) + propInt_68961((score_73017.slice(0,-1)).concat(makeNimstrLit("-adj")))));
return result_73018;
}
function bindp_66741(sel_66743, prop_66744) {

bindp_54451(jQuery_27506(toJSStr(sel_66743)), prop_66744);
}
function val_28057(sel_28059, val_28060) {

jQuery_27506(sel_28059).val(val_28060);
}
function updateRemainingHp_76002() {

val_28057("#hp-remaining", (propInt_68961(makeNimstrLit("tot-hp")) - propInt_68961(makeNimstrLit("dmg-taken"))));
}
function updateTotalHp_76018() {

set_67618(makeNimstrLit("tot-hp"), ((((propInt_68961(makeNimstrLit("con-hp")) + propInt_68961(makeNimstrLit("base-hp-tot"))) + propInt_68961(makeNimstrLit("hp-adjust-1"))) + propInt_68961(makeNimstrLit("hp-adjust-2"))) + propInt_68961(makeNimstrLit("hp-adjust-3"))));
updateRemainingHp_76002();
}
function bindall_77021() {

function colonanonymous__77132(e_77134) {

updateTotalHp_76018();
}
set_67618(makeNimstrLit("con-hp"), (mdfAdj_73015(makeNimstrLit("con")) * propInt_68961(makeNimstrLit("class-levels-tot"))));
L1: do {
var prop_77104 = null;
var i_77138 = 0;
if ((i_77138 <= 3)) {
L2: do {
L3: while (true) {
if (!true) break L3;
prop_77104 = [makeNimstrLit("con-hp"), makeNimstrLit("tot-hp"), makeNimstrLit("temp-hp"), makeNimstrLit("non-lethal")][i_77138];
bindid_66745(prop_77104);
if ((3 <= i_77138)) {
break L2;
}

i_77138 += 1;
}
} while(false);
}

} while(false);
bindp_66741(makeNimstrLit("#base-hp"), makeNimstrLit("base-hp-tot"));
L4: do {
var a_77131 = null;
var i_77142 = 0;
if ((i_77142 <= 2)) {
L5: do {
L6: while (true) {
if (!true) break L6;
a_77131 = adjust_77001[i_77142];
bindp_66741([35].concat(a_77131), a_77131);
change_28232(toJSStr([35].concat(a_77131)), colonanonymous__77132);
if ((2 <= i_77142)) {
break L5;
}

i_77142 += 1;
}
} while(false);
}

} while(false);
}
function valInt_28018(sel_28020) {

var result_28021 = 0;
result_28021 = valInt_27528(jQuery_27506(sel_28020));
return result_28021;
}
function adj_69743(propName_69745, amount_69746) {

if ((contains_55372(intData_53411[0], propName_69745) || contains_53770(data_53211[0], propName_69745))) {
var val_70073 = (propInt_68961(propName_69745) + amount_69746);
set_67618(propName_69745, val_70073);
}
else {
console.log(toJSStr((makeNimstrLit("cannot adjust ").slice(0,-1)).concat(propName_69745.slice(0,-1),makeNimstrLit(" (does not exist)"))));
}

}
function dealDamage_76004(dmg_76007, dmg_76007_Idx) {

if ((dmg_76007[dmg_76007_Idx] <= propInt_68961(makeNimstrLit("temp-hp")))) {
adj_69743(makeNimstrLit("temp-hp"), -(dmg_76007[dmg_76007_Idx]));
}
else {
dmg_76007[dmg_76007_Idx] -= propInt_68961(makeNimstrLit("temp-hp"));
set_67618(makeNimstrLit("temp-hp"), 0);
adj_69743(makeNimstrLit("dmg-taken"), dmg_76007[dmg_76007_Idx]);
}

updateRemainingHp_76002();
}
function dmgbtn_77011() {

function colonanonymous__77042(e_77044) {

var dmg_77045 = /**/[(valInt_28018("#hp-buffer")|0)];
dealDamage_76004(dmg_77045, 0);
val_28057("#hp-buffer", 0);
}
click_28218("#dmg-btn", colonanonymous__77042);
}
function healDamage_76015(heal_76017) {

adj_69743(makeNimstrLit("dmg-taken"), -(heal_76017));
if ((propInt_68961(makeNimstrLit("dmg-taken")) < 0)) {
set_67618(makeNimstrLit("dmg-taken"), 0);
}

updateRemainingHp_76002();
}
function healNonlethal_76008(heal_76010) {

adj_69743(makeNimstrLit("non-lethal"), -(heal_76010));
if ((propInt_68961(makeNimstrLit("non-lethal")) < 0)) {
set_67618(makeNimstrLit("non-lethal"), 0);
}

}
function healbtn_77009() {

function colonanonymous__77037(e_77039) {

healDamage_76015((valInt_28018("#hp-buffer")|0));
healNonlethal_76008((valInt_28018("#hp-buffer")|0));
val_28057("#hp-buffer", 0);
}
click_28218("#heal-btn", colonanonymous__77037);
}
function nonlethal_76011(dmg_76014, dmg_76014_Idx) {

adj_69743(makeNimstrLit("non-lethal"), dmg_76014[dmg_76014_Idx]);
}
function nonletbtn_77015() {

function colonanonymous__77061(e_77063) {

var dmg_77064 = /**/[(valInt_28018("#hp-buffer")|0)];
nonlethal_76011(dmg_77064, 0);
val_28057("#hp-buffer", 0);
}
click_28218("#non-lethal-btn", colonanonymous__77061);
}
function recbtn_77017() {

function colonanonymous__77056(e_77058) {

healNonlethal_76008(propInt_68961(makeNimstrLit("level")));
}
click_28218("#recover-btn", colonanonymous__77056);
}
function clearbtn_77019() {

function colonanonymous__77069(e_77071) {

set_67618(makeNimstrLit("dmg-taken"), 0);
set_67618(makeNimstrLit("non-lethal"), 0);
updateRemainingHp_76002();
val_28057("#hp-buffer", 0);
}
click_28218("#hp-clear-btn", colonanonymous__77069);
}
function restbtn_77013() {

function colonanonymous__77050(e_77052) {

var lv_77053 = propInt_68961(makeNimstrLit("level"));
healDamage_76015(lv_77053);
healNonlethal_76008((lv_77053 * 8));
val_28057("#hp-buffer", 0);
}
click_28218("#daily-rest-btn", colonanonymous__77050);
}
function updateBaseHp_75006() {

var tot_75049 = 0;
switch (toJSStr(prop_68179(makeNimstrLit("hit-die1")))) {
case "d6": tot_75049 += (((3.5000000000000000e+00 * propInt_68961(makeNimstrLit("class-levels1")))|0) + 3);

break;
case "d8": tot_75049 += (((4.5000000000000000e+00 * propInt_68961(makeNimstrLit("class-levels1")))|0) + 4);

break;
case "d10": tot_75049 += (((5.5000000000000000e+00 * propInt_68961(makeNimstrLit("class-levels1")))|0) + 5);

break;
case "d12": tot_75049 += (((6.5000000000000000e+00 * propInt_68961(makeNimstrLit("class-levels1")))|0) + 6);

break;
default: 
break;
}
L1: do {
var i_75095 = 0;
var res_75151 = 2;
L2: do {
L3: while (true) {
if (!(res_75151 <= 5)) break L3;
i_75095 = res_75151;
switch (toJSStr(prop_68179((makeNimstrLit("hit-die").slice(0,-1)).concat(cstrToNimstr((i_75095)+""))))) {
case "d6": tot_75049 += ((3.5000000000000000e+00 * propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75095)+""))))|0);

break;
case "d8": tot_75049 += ((4.5000000000000000e+00 * propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75095)+""))))|0);

break;
case "d10": tot_75049 += ((5.5000000000000000e+00 * propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75095)+""))))|0);

break;
case "d12": tot_75049 += ((6.5000000000000000e+00 * propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75095)+""))))|0);

break;
default: 
break;
}
res_75151 += 1;
}
} while(false);
} while(false);
set_67618(makeNimstrLit("base-hp-tot"), tot_75049);
}
function update_77025() {

updateBaseHp_75006();
updateTotalHp_76018();
}
function updateStatus_77004(response_77006, status_77007, xhr_77008) {

defaults_77023();
bindall_77021();
dmgbtn_77011();
healbtn_77009();
nonletbtn_77015();
recbtn_77017();
clearbtn_77019();
restbtn_77013();
update_77025();
}
function loadStatus_77027(e_77029) {

load_28207("#page-content-wrapper", "/public/status.html", "", updateStatus_77004);
}
function show_28201(sel_28203) {

jQuery_27506(toJSStr(sel_28203)).show();
}
function listclasses_80010() {

function colonanonymous__80038(e_80040) {

adj_69743(makeNimstrLit("classCounter"), 1);
if ((5 < propInt_68961(makeNimstrLit("classCounter")))) {
set_67618(makeNimstrLit("classCounter"), 5);
}

show_28201((makeNimstrLit("#class").slice(0,-1)).concat(prop_68179(makeNimstrLit("classCounter"))));
}
L1: do {
var i_80037 = 0;
var colontmp__80042 = 0;
colontmp__80042 = propInt_68961(makeNimstrLit("classCounter"));
var res_80045 = 1;
L2: do {
L3: while (true) {
if (!(res_80045 <= colontmp__80042)) break L3;
i_80037 = res_80045;
show_28201((makeNimstrLit("#class").slice(0,-1)).concat(cstrToNimstr((i_80037)+"")));
res_80045 += 1;
}
} while(false);
} while(false);
click_28218("#add-class", colonanonymous__80038);
}
function hide_28204(sel_28206) {

jQuery_27506(toJSStr(sel_28206)).hide();
}
function rmbtn_80012() {

function colonanonymous__80051(e_80053) {

hide_28204((makeNimstrLit("#class").slice(0,-1)).concat(prop_68179(makeNimstrLit("classCounter"))));
adj_69743(makeNimstrLit("classCounter"), -1);
if ((propInt_68961(makeNimstrLit("classCounter")) < 0)) {
set_67618(makeNimstrLit("classCounter"), 0);
}

}
click_28218("#remove-class", colonanonymous__80051);
}
function setIfNo_68171(propName_68173, value_68174) {

if (!(propExists_53612(propName_68173))) {
set_66752(propName_68173, value_68174);
}

}
function updateBaseSkills_75008() {

var tot_75157 = 0;
L1: do {
var i_75167 = 0;
var res_75180 = 1;
L2: do {
L3: while (true) {
if (!(res_75180 <= 5)) break L3;
i_75167 = res_75180;
if (!(eqStrings(prop_68179((makeNimstrLit("base-skills").slice(0,-1)).concat(cstrToNimstr((i_75167)+""))), makeNimstrLit("")))) {
tot_75157 += (propInt_68961((makeNimstrLit("base-skills").slice(0,-1)).concat(cstrToNimstr((i_75167)+""))) * propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75167)+""))));
}

res_75180 += 1;
}
} while(false);
} while(false);
set_67618(makeNimstrLit("base-skills-tot"), tot_75157);
}
function updateBAB_75010() {

var tot_75186 = 0;
L1: do {
var i_75196 = 0;
var res_75229 = 1;
L2: do {
L3: while (true) {
if (!(res_75229 <= 5)) break L3;
i_75196 = res_75229;
switch (toJSStr(prop_68179((makeNimstrLit("bab").slice(0,-1)).concat(cstrToNimstr((i_75196)+""))))) {
case "1/2": tot_75186 += (slash__21007(propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75196)+""))), 2)|0);

break;
case "3/4": tot_75186 += (slash__21007((propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75196)+""))) * 3), 4)|0);

break;
case "full": tot_75186 += propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75196)+"")));

break;
default: 
break;
}
res_75229 += 1;
}
} while(false);
} while(false);
set_67618(makeNimstrLit("bab-tot"), tot_75186);
}
function updateBaseSave_75012(p_75014) {

var tot_75236 = 0;
switch (toJSStr(prop_68179((p_75014.slice(0,-1)).concat([49, 0])))) {
case "good": tot_75236 += ((slash__21007(propInt_68961(makeNimstrLit("class-levels1")), 2)|0) + 2);

break;
case "poor": tot_75236 += (slash__21007(propInt_68961(makeNimstrLit("class-levels1")), 3)|0);

break;
default: 
break;
}
L1: do {
var i_75264 = 0;
var res_75290 = 2;
L2: do {
L3: while (true) {
if (!(res_75290 <= 5)) break L3;
i_75264 = res_75290;
switch (toJSStr(prop_68179((p_75014.slice(0,-1)).concat(cstrToNimstr((i_75264)+""))))) {
case "good": tot_75236 += (slash__21007(propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75264)+""))), 2)|0);

break;
case "poor": tot_75236 += (slash__21007(propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75264)+""))), 3)|0);

break;
default: 
break;
}
res_75290 += 1;
}
} while(false);
} while(false);
set_67618((p_75014.slice(0,-1)).concat(makeNimstrLit("-tot")), tot_75236);
}
function updateBaseSaves_75015() {

updateBaseSave_75012(makeNimstrLit("base-fort"));
updateBaseSave_75012(makeNimstrLit("base-ref"));
updateBaseSave_75012(makeNimstrLit("base-will"));
}
function classesCalcTotal_75003(frm_75005) {

switch (toJSStr(frm_75005)) {
case "class-levels": var tot_75020 = 0;
L1: do {
var i_75030 = 0;
var res_75043 = 1;
L2: do {
L3: while (true) {
if (!(res_75043 <= 5)) break L3;
i_75030 = res_75043;
if (!(eqStrings(prop_68179((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75030)+""))), makeNimstrLit("")))) {
tot_75020 += propInt_68961((makeNimstrLit("class-levels").slice(0,-1)).concat(cstrToNimstr((i_75030)+"")));
}

res_75043 += 1;
}
} while(false);
} while(false);
set_67618(makeNimstrLit("class-levels-tot"), tot_75020);
updateBaseHp_75006();
updateBaseSkills_75008();
updateBAB_75010();
updateBaseSaves_75015();

break;
case "hit-die": updateBaseHp_75006();

break;
case "base-skills": updateBaseSkills_75008();

break;
case "bab": updateBAB_75010();

break;
case "base-fort": case "base-ref": case "base-will": updateBaseSave_75012(frm_75005);

break;
default: 
break;
}
}
function bindall_80014() {

function colonanonymous__80093() {

function colonanonymous__80097(e_80099) {

classesCalcTotal_75003(f_80095);
}
var f_80095 = nimCopy(null, field_80082, NTI138);
var j_80096 = i_80092;
change_28232(toJSStr([35].concat(f_80095.slice(0,-1),cstrToNimstr((j_80096)+""))), colonanonymous__80097);
}
bindid_66745(makeNimstrLit("base-hp-tot"));
L1: do {
var field_80082 = null;
var i_80112 = 0;
if ((i_80112 <= 7)) {
L2: do {
L3: while (true) {
if (!true) break L3;
field_80082 = fields_80007[i_80112];
L4: do {
if (eqStrings(field_80082, makeNimstrLit("class-name"))) {
break L4;
}

if (!(eqStrings(field_80082, makeNimstrLit("hit-die")))) {
bindid_66745((field_80082.slice(0,-1)).concat(makeNimstrLit("-tot")));
}

L5: do {
var i_80092 = 0;
var res_80106 = 1;
L6: do {
L7: while (true) {
if (!(res_80106 <= 5)) break L7;
i_80092 = res_80106;
setIfNo_68171((field_80082.slice(0,-1)).concat(cstrToNimstr((i_80092)+"")), makeNimstrLit(""));
bindid_66745((field_80082.slice(0,-1)).concat(cstrToNimstr((i_80092)+"")));
colonanonymous__80093();
res_80106 += 1;
}
} while(false);
} while(false);
} while(false);
if ((7 <= i_80112)) {
break L2;
}

i_80112 += 1;
}
} while(false);
}

} while(false);
}
function update_80016() {

classesCalcTotal_75003(makeNimstrLit("class-levels"));
}
function updateClasses_80002(response_80004, status_80005, xhr_80006) {

listclasses_80010();
rmbtn_80012();
bindall_80014();
update_80016();
}
function loadClasses_80018(e_80020) {

load_28207("#page-content-wrapper", "/public/classes.html", "", updateClasses_80002);
}
function getmods_79012() {

set_67618(makeNimstrLit("fort-mod"), mdfAdj_73015(makeNimstrLit("con")));
set_67618(makeNimstrLit("ref-mod"), mdfAdj_73015(makeNimstrLit("dex")));
set_67618(makeNimstrLit("will-mod"), mdfAdj_73015(makeNimstrLit("wis")));
bindp_66741(makeNimstrLit("#dex-ac"), makeNimstrLit("ref-mod"));
}
function bindfields_79014() {

L1: do {
var field_79045 = null;
var i_79049 = 0;
if ((i_79049 <= 11)) {
L2: do {
L3: while (true) {
if (!true) break L3;
field_79045 = [makeNimstrLit("ac"), makeNimstrLit("ff"), makeNimstrLit("touch"), makeNimstrLit("fort-tot"), makeNimstrLit("ref-tot"), makeNimstrLit("will-tot"), makeNimstrLit("base-fort-tot"), makeNimstrLit("base-ref-tot"), makeNimstrLit("base-will-tot"), makeNimstrLit("fort-mod"), makeNimstrLit("ref-mod"), makeNimstrLit("will-mod")][i_79049];
bindid_66745(field_79045);
if ((11 <= i_79049)) {
break L2;
}

i_79049 += 1;
}
} while(false);
}

} while(false);
}
function id_66748(prop_66750) {

var result_66751 = null;
result_66751 = jQuery_27506(toJSStr([35].concat(prop_66750)));
return result_66751;
}
function calcAC_78003() {

var tot_78071 = 10;
L1: do {
var bns_78100 = null;
var i_78113 = 0;
if ((i_78113 <= 6)) {
L2: do {
L3: while (true) {
if (!true) break L3;
bns_78100 = [makeNimstrLit("armor-bns"), makeNimstrLit("shield-bns"), makeNimstrLit("nat-bns"), makeNimstrLit("defl-bns"), makeNimstrLit("dodge-bns"), makeNimstrLit("misc-bns"), makeNimstrLit("dex-mod")][i_78113];
tot_78071 += propInt_68961(bns_78100);
if ((6 <= i_78113)) {
break L2;
}

i_78113 += 1;
}
} while(false);
}

} while(false);
set_67618(makeNimstrLit("ac"), tot_78071);
}
function calcFF_78005() {

var tot_78116 = 10;
L1: do {
var bns_78128 = null;
var i_78141 = 0;
if ((i_78141 <= 3)) {
L2: do {
L3: while (true) {
if (!true) break L3;
bns_78128 = [makeNimstrLit("armor-bns"), makeNimstrLit("shield-bns"), makeNimstrLit("nat-bns"), makeNimstrLit("misc-bns")][i_78141];
tot_78116 += propInt_68961(bns_78128);
if ((3 <= i_78141)) {
break L2;
}

i_78141 += 1;
}
} while(false);
}

} while(false);
set_67618(makeNimstrLit("ff"), tot_78116);
}
function calcTouch_78007() {

var tot_78144 = 10;
L1: do {
var bns_78156 = null;
var i_78169 = 0;
if ((i_78169 <= 2)) {
L2: do {
L3: while (true) {
if (!true) break L3;
bns_78156 = [makeNimstrLit("dodge-bns"), makeNimstrLit("defl-bns"), makeNimstrLit("dex-mod")][i_78169];
tot_78144 += propInt_68961(bns_78156);
if ((2 <= i_78169)) {
break L2;
}

i_78169 += 1;
}
} while(false);
}

} while(false);
set_67618(makeNimstrLit("touch"), tot_78144);
}
function updateAC_78009(fromBns_78011) {

calcAC_78003();
switch (toJSStr(fromBns_78011)) {
case "armor-bns": case "shield-bns": case "nat-bns": calcFF_78005();

break;
case "dodge-bns": case "dex-mod": calcTouch_78007();

break;
default: 
calcFF_78005();
calcTouch_78007();
break;
}
}
function bindbns_79016() {

function colonanonymous__79062() {

function colonanonymous__79065(e_79067) {

updateAC_78009(bns_79064);
}
var bns_79064 = nimCopy(null, bonus_79061, NTI138);
id_66748(bonus_79061).change(colonanonymous__79065);
}
L1: do {
var bonus_79061 = null;
var i_79072 = 0;
if ((i_79072 <= 5)) {
L2: do {
L3: while (true) {
if (!true) break L3;
bonus_79061 = bonuses_79001[i_79072];
bindid_66745(bonus_79061);
colonanonymous__79062();
if ((5 <= i_79072)) {
break L2;
}

i_79072 += 1;
}
} while(false);
}

} while(false);
}
function updateSave_78012(savingThrow_78014) {

var tot_78020 = 0;
L1: do {
var save_78049 = null;
var colontmp__78060 = [null, null, null, null, null];
colontmp__78060 = [(makeNimstrLit("base-").slice(0,-1)).concat(savingThrow_78014.slice(0,-1),makeNimstrLit("-tot")), (savingThrow_78014.slice(0,-1)).concat(makeNimstrLit("-mod")), (savingThrow_78014.slice(0,-1)).concat(makeNimstrLit("-mag")), (savingThrow_78014.slice(0,-1)).concat(makeNimstrLit("-misc")), (savingThrow_78014.slice(0,-1)).concat(makeNimstrLit("-temp"))];
var i_78063 = 0;
if ((i_78063 <= 4)) {
L2: do {
L3: while (true) {
if (!true) break L3;
save_78049 = colontmp__78060[i_78063];
tot_78020 += propInt_68961(save_78049);
if ((4 <= i_78063)) {
break L2;
}

i_78063 += 1;
}
} while(false);
}

} while(false);
set_67618((savingThrow_78014.slice(0,-1)).concat(makeNimstrLit("-tot")), tot_78020);
}
function bindsaves_79018() {

function colonanonymous__79102() {

function colonanonymous__79105(e_79107) {

updateSave_78012(sec_70074(s_79104, 0));
}
var s_79104 = nimCopy(null, save_79101, NTI138);
id_66748(save_79101).change(colonanonymous__79105);
}
L1: do {
var save_79101 = null;
var i_79111 = 0;
if ((i_79111 <= 8)) {
L2: do {
L3: while (true) {
if (!true) break L3;
save_79101 = saves_79004[i_79111];
bindid_66745(save_79101);
colonanonymous__79102();
if ((8 <= i_79111)) {
break L2;
}

i_79111 += 1;
}
} while(false);
}

} while(false);
}
function updateSaves_78015() {

updateSave_78012(makeNimstrLit("fort"));
updateSave_78012(makeNimstrLit("ref"));
updateSave_78012(makeNimstrLit("will"));
}
function update_79020() {

updateBaseSaves_75015();
updateSaves_78015();
updateAC_78009(makeNimstrLit("*"));
}
function updateDefenses_79007(response_79009, status_79010, xhr_79011) {

getmods_79012();
bindfields_79014();
bindbns_79016();
bindsaves_79018();
update_79020();
}
function loadDefenses_79022(e_79024) {

load_28207("#page-content-wrapper", "/public/defenses.html", "", updateDefenses_79007);
}
function newCell_82023(i_82025) {

var result_82156 = null;
var cell_82157 = jQuery_27506("<td></td>");
var el_82158 = jQuery_27506(toJSStr(columns_82030[i_82025]));
el_82158.attr("id", toJSStr((colIds_82033[i_82025].slice(0,-1)).concat(prop_68179(makeNimstrLit("attack-counter")))));
cell_82157.append(el_82158);
result_82156 = cell_82157;
return result_82156;
}
function append_28073(sel_28075, val_28076) {

jQuery_27506(sel_28075).append(val_28076);
}
function bindRow_82020(row_82022) {

L1: do {
var id_82171 = null;
var i_82175 = 0;
if ((i_82175 <= 7)) {
L2: do {
L3: while (true) {
if (!true) break L3;
id_82171 = colIds_82033[i_82175];
bindid_66745((id_82171.slice(0,-1)).concat(cstrToNimstr((row_82022)+"")));
if ((7 <= i_82175)) {
break L2;
}

i_82175 += 1;
}
} while(false);
}

} while(false);
}
function addRow_82026() {

adj_69743(makeNimstrLit("attack-counter"), 1);
var row_82129 = jQuery_27506("<tr></tr>");
row_82129.attr("id", toJSStr((makeNimstrLit("attack-row").slice(0,-1)).concat(prop_68179(makeNimstrLit("attack-counter")))));
L1: do {
var i_82147 = 0;
var i_82151 = 0;
L2: do {
L3: while (true) {
if (!(i_82151 < 8)) break L3;
i_82147 = i_82151;
row_82129.append(newCell_82023(i_82147));
i_82151 += 1;
}
} while(false);
} while(false);
append_28073("#attacks", row_82129);
bindRow_82020(propInt_68961(makeNimstrLit("attack-counter")));
}
function updaterows_82028() {

var c_82111 = propInt_68961(makeNimstrLit("attack-counter"));
set_67618(makeNimstrLit("attack-counter"), 0);
L1: do {
L2: while (true) {
if (!(propInt_68961(makeNimstrLit("attack-counter")) < c_82111)) break L2;
addRow_82026();
}
} while(false);
}
function addrowbtn_82010() {

function colonanonymous__82115(e_82117) {

addRow_82026();
}
click_28218("#add-attack", colonanonymous__82115);
}
function remove_28101(sel_28103, cls_28104) {

jQuery_27506(sel_28103).remove(cls_28104);
}
function removeRow_82014() {

remove_28101(toJSStr((makeNimstrLit("#attack-row").slice(0,-1)).concat(prop_68179(makeNimstrLit("attack-counter")))), "");
adj_69743(makeNimstrLit("attack-counter"), -1);
if ((propInt_68961(makeNimstrLit("attack-counter")) < 1)) {
set_67618(makeNimstrLit("attack-counter"), 1);
}

}
function rmrowbtn_82012() {

function colonanonymous__82121(e_82123) {

removeRow_82014();
}
click_28218("#remove-attack", colonanonymous__82121);
}
function updateAttribute_81003(atr_81005) {

var tot_81006 = 0;
L1: do {
var val_81018 = null;
var i_81031 = 0;
if ((i_81031 <= 4)) {
L2: do {
L3: while (true) {
if (!true) break L3;
val_81018 = [makeNimstrLit("base"), makeNimstrLit("adjust-1"), makeNimstrLit("adjust-2"), makeNimstrLit("adjust-3"), makeNimstrLit("temp")][i_81031];
tot_81006 += propInt_68961((atr_81005.slice(0,-1)).concat([45],val_81018));
if ((4 <= i_81031)) {
break L2;
}

i_81031 += 1;
}
} while(false);
}

} while(false);
set_67618((atr_81005.slice(0,-1)).concat(makeNimstrLit("-tot")), tot_81006);
}
function setupdate_82006(atr_82008, val_82009) {

function colonanonymous__82103() {

function colonanonymous__82106(e_82108) {

updateAttribute_81003(a_82105);
}
var a_82105 = nimCopy(null, atr_82008, NTI138);
change_28232(toJSStr([35].concat(atr_82008.slice(0,-1),[45],val_82009)), colonanonymous__82106);
}
colonanonymous__82103();
}
function bindattributes_82016() {

L1: do {
var atr_82062 = null;
var i_82098 = 0;
if ((i_82098 <= 2)) {
L2: do {
L3: while (true) {
if (!true) break L3;
atr_82062 = [makeNimstrLit("cmb"), makeNimstrLit("cmd"), makeNimstrLit("init")][i_82098];
L4: do {
var val_82074 = null;
var i_82091 = 0;
if ((i_82091 <= 5)) {
L5: do {
L6: while (true) {
if (!true) break L6;
val_82074 = [makeNimstrLit("tot"), makeNimstrLit("base"), makeNimstrLit("adjust-1"), makeNimstrLit("adjust-2"), makeNimstrLit("adjust-3"), makeNimstrLit("temp")][i_82091];
bindid_66745((atr_82062.slice(0,-1)).concat([45],val_82074));
if ((5 <= i_82091)) {
break L5;
}

i_82091 += 1;
}
} while(false);
}

} while(false);
L7: do {
var val_82086 = null;
var i_82095 = 0;
if ((i_82095 <= 3)) {
L8: do {
L9: while (true) {
if (!true) break L9;
val_82086 = [makeNimstrLit("adjust-1"), makeNimstrLit("adjust-2"), makeNimstrLit("adjust-3"), makeNimstrLit("temp")][i_82095];
setupdate_82006(atr_82062, val_82086);
if ((3 <= i_82095)) {
break L8;
}

i_82095 += 1;
}
} while(false);
}

} while(false);
if ((2 <= i_82098)) {
break L2;
}

i_82098 += 1;
}
} while(false);
}

} while(false);
}
function setbase_82018() {

var bab_82046 = propInt_68961(makeNimstrLit("bab-tot"));
var dex_82047 = mdfAdj_73015(makeNimstrLit("dex"));
var str_82048 = mdfAdj_73015(makeNimstrLit("str"));
set_67618(makeNimstrLit("cmb-base"), (str_82048 + bab_82046));
set_67618(makeNimstrLit("cmd-base"), (((str_82048 + dex_82047) + bab_82046) + 10));
set_67618(makeNimstrLit("init-base"), dex_82047);
}
function updateAttributes_81032() {

updateAttribute_81003(makeNimstrLit("init"));
updateAttribute_81003(makeNimstrLit("cmb"));
updateAttribute_81003(makeNimstrLit("cmd"));
}
function updateCombat_82001(response_82003, status_82004, xhr_82005) {

updaterows_82028();
addrowbtn_82010();
rmrowbtn_82012();
bindattributes_82016();
setbase_82018();
updateAttributes_81032();
if ((propInt_68961(makeNimstrLit("attack-counter")) == 0)) {
addRow_82026();
}

}
function loadCombat_82036(e_82038) {

load_28207("#page-content-wrapper", "/public/combat.html", "", updateCombat_82001);
}
function calcSkill_83006(skill_83008) {

var tot_83009 = 0;
L1: do {
var field_83021 = null;
var i_83044 = 0;
if ((i_83044 <= 2)) {
L2: do {
L3: while (true) {
if (!true) break L3;
field_83021 = [makeNimstrLit("class-bns"), makeNimstrLit("misc-mod"), makeNimstrLit("ability-mod")][i_83044];
tot_83009 += propInt_68961((field_83021.slice(0,-1)).concat([45],skill_83008));
if ((2 <= i_83044)) {
break L2;
}

i_83044 += 1;
}
} while(false);
}

} while(false);
var ranks_83031 = propInt_68961((makeNimstrLit("ranks-").slice(0,-1)).concat(skill_83008));
tot_83009 += ranks_83031;
set_67618((makeNimstrLit("tot-").slice(0,-1)).concat(skill_83008), tot_83009);
}
function bindall_84008() {

function colonanonymous__84106() {

function colonanonymous__84110(e_84112) {

console.log("changed");
calcSkill_83006(s_84109);
}
var el_84108 = (field_84105.slice(0,-1)).concat([45],skill_84063);
setIfNo_68175(el_84108, 0);
bindid_66745(el_84108);
var s_84109 = nimCopy(null, skill_84063, NTI138);
change_28232(toJSStr([35].concat(el_84108)), colonanonymous__84110);
}
L1: do {
var skill_84063 = null;
var i_84124 = 0;
if ((i_84124 <= 27)) {
L2: do {
L3: while (true) {
if (!true) break L3;
skill_84063 = skills_83003[i_84124];
setIfNo_68171((makeNimstrLit("is-class-skill-").slice(0,-1)).concat(skill_84063), makeNimstrLit("FALSE"));
L4: do {
var field_84092 = null;
var i_84117 = 0;
if ((i_84117 <= 1)) {
L5: do {
L6: while (true) {
if (!true) break L6;
field_84092 = [makeNimstrLit("specialty"), makeNimstrLit("is-armor-pen")][i_84117];
var el_84093 = (field_84092.slice(0,-1)).concat([45],skill_84063);
setIfNo_68171(el_84093, makeNimstrLit(""));
bindid_66745(el_84093);
if ((1 <= i_84117)) {
break L5;
}

i_84117 += 1;
}
} while(false);
}

} while(false);
L7: do {
var field_84105 = null;
var i_84121 = 0;
if ((i_84121 <= 4)) {
L8: do {
L9: while (true) {
if (!true) break L9;
field_84105 = [makeNimstrLit("ranks"), makeNimstrLit("class-bns"), makeNimstrLit("misc-mod"), makeNimstrLit("ability-mod"), makeNimstrLit("is-class-skill")][i_84121];
colonanonymous__84106();
if ((4 <= i_84121)) {
break L8;
}

i_84121 += 1;
}
} while(false);
}

} while(false);
bindid_66745((makeNimstrLit("tot-").slice(0,-1)).concat(skill_84063));
if ((27 <= i_84124)) {
break L2;
}

i_84124 += 1;
}
} while(false);
}

} while(false);
}
function setarmorpen_84010() {

L1: do {
var skill_84031 = null;
var i_84047 = 0;
if ((i_84047 <= 27)) {
L2: do {
L3: while (true) {
if (!true) break L3;
skill_84031 = skills_83003[i_84047];
set_66752((makeNimstrLit("is-armor-pen-").slice(0,-1)).concat(skill_84031), makeNimstrLit("FALSE"));
if ((27 <= i_84047)) {
break L2;
}

i_84047 += 1;
}
} while(false);
}

} while(false);
L4: do {
var skill_84043 = null;
var i_84051 = 0;
if ((i_84051 <= 7)) {
L5: do {
L6: while (true) {
if (!true) break L6;
skill_84043 = [makeNimstrLit("acrobatics"), makeNimstrLit("climb"), makeNimstrLit("disable-device"), makeNimstrLit("escape-artist"), makeNimstrLit("ride"), makeNimstrLit("sleight-of-hand"), makeNimstrLit("stealth"), makeNimstrLit("swim")][i_84051];
set_66752((makeNimstrLit("is-armor-pen-").slice(0,-1)).concat(skill_84043), makeNimstrLit("TRUE"));
if ((7 <= i_84051)) {
break L5;
}

i_84051 += 1;
}
} while(false);
}

} while(false);
}
function updateabilitymods_84006() {

var str_84127 = mdfAdj_73015(makeNimstrLit("str"));
var dex_84128 = mdfAdj_73015(makeNimstrLit("dex"));
var int_84129 = mdfAdj_73015(makeNimstrLit("int"));
var wis_84130 = mdfAdj_73015(makeNimstrLit("wis"));
var cha_84131 = mdfAdj_73015(makeNimstrLit("cha"));
L1: do {
var skill_84143 = null;
var i_84195 = 0;
if ((i_84195 <= 1)) {
L2: do {
L3: while (true) {
if (!true) break L3;
skill_84143 = [makeNimstrLit("climb"), makeNimstrLit("swim")][i_84195];
set_67618((makeNimstrLit("ability-mod-").slice(0,-1)).concat(skill_84143), str_84127);
if ((1 <= i_84195)) {
break L2;
}

i_84195 += 1;
}
} while(false);
}

} while(false);
L4: do {
var skill_84155 = null;
var i_84199 = 0;
if ((i_84199 <= 6)) {
L5: do {
L6: while (true) {
if (!true) break L6;
skill_84155 = [makeNimstrLit("acrobatics"), makeNimstrLit("disable-device"), makeNimstrLit("escape-artist"), makeNimstrLit("fly"), makeNimstrLit("ride"), makeNimstrLit("sleight-of-hand"), makeNimstrLit("stealth")][i_84199];
set_67618((makeNimstrLit("ability-mod-").slice(0,-1)).concat(skill_84155), dex_84128);
if ((6 <= i_84199)) {
break L5;
}

i_84199 += 1;
}
} while(false);
}

} while(false);
L7: do {
var skill_84167 = null;
var i_84203 = 0;
if ((i_84203 <= 6)) {
L8: do {
L9: while (true) {
if (!true) break L9;
skill_84167 = [makeNimstrLit("appraise"), makeNimstrLit("craft"), makeNimstrLit("knowledge1"), makeNimstrLit("knowledge2"), makeNimstrLit("knowledge3"), makeNimstrLit("linguistics"), makeNimstrLit("spellcraft")][i_84203];
set_67618((makeNimstrLit("ability-mod-").slice(0,-1)).concat(skill_84167), int_84129);
if ((6 <= i_84203)) {
break L8;
}

i_84203 += 1;
}
} while(false);
}

} while(false);
L10: do {
var skill_84179 = null;
var i_84207 = 0;
if ((i_84207 <= 4)) {
L11: do {
L12: while (true) {
if (!true) break L12;
skill_84179 = [makeNimstrLit("heal"), makeNimstrLit("perception"), makeNimstrLit("profession"), makeNimstrLit("sense-motive"), makeNimstrLit("survival")][i_84207];
set_67618((makeNimstrLit("ability-mod-").slice(0,-1)).concat(skill_84179), wis_84130);
if ((4 <= i_84207)) {
break L11;
}

i_84207 += 1;
}
} while(false);
}

} while(false);
L13: do {
var skill_84191 = null;
var i_84211 = 0;
if ((i_84211 <= 6)) {
L14: do {
L15: while (true) {
if (!true) break L15;
skill_84191 = [makeNimstrLit("bluff"), makeNimstrLit("diplomacy"), makeNimstrLit("disguise"), makeNimstrLit("handle-animal"), makeNimstrLit("intimidate"), makeNimstrLit("perform"), makeNimstrLit("use-magic")][i_84211];
set_67618((makeNimstrLit("ability-mod-").slice(0,-1)).concat(skill_84191), cha_84131);
if ((6 <= i_84211)) {
break L14;
}

i_84211 += 1;
}
} while(false);
}

} while(false);
}
function calcSkills_83045() {

L1: do {
var skill_83074 = null;
var i_83078 = 0;
if ((i_83078 <= 27)) {
L2: do {
L3: while (true) {
if (!true) break L3;
skill_83074 = skills_83003[i_83078];
calcSkill_83006(skill_83074);
if ((27 <= i_83078)) {
break L2;
}

i_83078 += 1;
}
} while(false);
}

} while(false);
}
function updateSkills_84001(response_84003, status_84004, xhr_84005) {

bindall_84008();
setarmorpen_84010();
updateabilitymods_84006();
calcSkills_83045();
set_66752(makeNimstrLit("is-class-skill-acrobatics"), makeNimstrLit("TRUE"));
}
function loadSkills_84012(e_84014) {

load_28207("#page-content-wrapper", "/public/skills.html", "", updateSkills_84001);
}
function updateEquipment_85002(response_85004, status_85005, xhr_85006) {

console.log("hello");
}
function loadEquipment_85007(e_85009) {

load_28207("#page-content-wrapper", "/public/equipment.html", "", updateEquipment_85002);
}
function colonanonymous__86001(e_86003) {

click_28218("#details", loadDetails_72010);
click_28218("#stats", loadStats_74018);
click_28218("#status", loadStatus_77027);
click_28218("#classes", loadClasses_80018);
click_28218("#defenses", loadDefenses_79022);
click_28218("#combat", loadCombat_82036);
click_28218("#skills", loadSkills_84012);
click_28218("#equipment", loadEquipment_85007);
}
q_28010(document).ready(colonanonymous__86001);
